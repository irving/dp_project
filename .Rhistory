f3.err = 11.27
summary(f2)
f2.err = 3.046
f2.err
f2.err/f3.err
f3.err/f2.err
data(mtcars)
d1 <- data.frame(mpg=mtcars$mpg, wt=mtcars$wt)
fit <- lm(mpg ~ wt, data=d1)
p1 <- predict(fit, data.frame(wt=3.0))
p1
summary(p1)
coef(p1)
p1 <- predict(fit, data.frame(wt=3.0), interval="predict")
p1
p2 <- predict(fit, data.frame(wt=3.0), interval="confidence")
p2
data(mtcars)
head(mtcars)
?mtcars
head(mtcars)
data(mtcars)
library(datasets)
data(mtcars)
head(mtcars)
summary(mtcars$am)
?mtcars
sp <- ggplot(mtcars, aes(x=mpg,y=cyl))
library(ggplot2)
sp <- ggplot(mtcars, aes(x=mpg,y=cyl))
sp + facet_grid(mpg ~ .)
sp
sp + geom_point()
sp + facet_grid(mpg ~ .)
sp <- sp + geom_point()
sp
sp + facet_grid(mpg ~ .)
sp <- ggplot(mtcars, aes(x=mpg)) + geom_point()
sp + facet_grid(mpg ~ .)
sp + facet_grid(mpg ~ ., data=mtcars)
sp + facet_grid(mpg ~ .)
sp <- ggplot(mtcars, aes(x=mpg, y=hp)) + geom_point()
sp + facet_grid(mpg ~ .)
sp + facet_grid(. ~ mpg)
sp <- ggplot(mtcars, aes(x=mpg, y=cyl)) + geom_point()
sp + facet_grid(mpg ~ am)
sp <- ggplot(mtcars, aes(x=cyl, y=mpg)) + geom_point()
sp
ggplot(mtcars, aes(x=mpg, y=am)) + geom_point()
ggplot(mtcars, aes(x=mpg, y=wt)) + geom_point()
ggplot(mtcars, aes(x=mpg, y=wt)) + geom_line()
ggplot(mtcars, aes(x=mpg, y=wt)) + geom_point()
geom_line()
p <- ggplot(mtcars, aes(x=mpg, y=wt)) + geom_point()
p + geom_line(data=mtcars)
?geom_line
swirl()
library(swirl)
swirl()
all <- lm(Fertility ~ ., data=swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, data=swiss))
?cor
cor(swiss$Education ~ swiss$Examination)
cor(swiss$Education, swiss$Examination)
cor(swiss$Education, swiss$Agriculture)
makelms()
ec <- swiss$Examination + swixx$Catholic
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec)
efit <- lm(Fertility ~ . + ec, data=swiss)
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays, 15)
sd
sD
summary(InsectSprays[,2])
sapply(InsectSprays, class)
fit <- lm(count ~ spray, data=InsectSprays)
summary(fit$coefficients)
summary(fit$coef)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, data=InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~spray, data=spray2)
fit2 <- lm(count ~spray2, data=InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2] - fit$coef[3])/1.6011
library(swirl)
swirl()
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, data=hunger)
summary(fit)$coef
lmF <- lm(hunger[$Sex=="Female"])
lmF <- lm(hunger[Sex=="Female"])
lmF <- lm(hunger[hunger$Sex=="Female"])
lmF <- lm(hunger[hunger$Sex=="Female",])
lmF <- lm(hunger[hunger$Sex=="Female",]~hunger[,hunger$Year == 1980], data=hunger)
lmF <- lm(hunger$Sex ~ hunger$Year, data=hunger)
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(Numeric ~ Year + Sex, data=hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, data=hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1])
fitno <- lm(y ~ x, out2[-1],)
fitno <- lm(y ~ x, out2[-1,])
plot(fitno, which=1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- summary(fit)$coef[1]
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma * sqrt(1 - hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/resid.df(fitno))
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1 * sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1 * sqrt(1-hatvalues(fit)[1]))
Use head(rstudent(fit))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2)/(2 * sigma^2)
plot(fit, which=5)
library(datasets)
library(ggplot2)
require(GGally)
data(mtcars)
ggplot(mtcars, aes(x=factor(am), y=mpg)) +
scale_x_discrete(breaks=c(0,1), labels=c("automatic", "manual")) +
abs(x = "Transmission") + geom_boxplot()
ggplot(mtcars, aes(x=factor(am), y=mpg)) +
scale_x_discrete(breaks=c(0,1), labels=c("automatic", "manual")) +
labs(x = "Transmission") + geom_boxplot()
ggplot(data=mtcars, aes(x=wt, y=mpg)) + geom_point() +
+ geom_smooth(method="lm")
ggplot(data=mtcars, aes(x=wt, y=mpg)) + geom_point() +
geom_smooth(method="lm")
adjdata <- mtcars
adjdata$cyl <- factor(adjdata$cyl)
adjdata$am <- factor(adjdata$am)
f1  <- lm(mpg ~ ., data = adjdata)
summary(f1)$coef
?mtcars
ggplot(mtcars, aes(x=factor(am), y=mpg)) +
scale_x_discrete(breaks=c(0,1), labels=c("automatic", "manual")) +
labs(x = "Transmission") + geom_boxplot()
?subset
mtcars[am == 1,]
head(mtcars)
mtcars[mtcars$am == 1,]
t1 <- mtcars[mtcars$am == 1,]
head(t1)
t2 <- mtcars[mtcars$am == 0,]
head(t2)
mtcars[mtcars$am == 0, mpg]
mtcars[mtcars$am == 0, 1]
f2 <- lm(mpg ~ wt + am + cyl + vs, data=adjdata)
summary(f2)
f3 <- lm(mpg ~ wt + am, data=adjdata)
summary(f3)
adj <- mtcars
adj$cyl <- factor(adj$cyl)
class(adjdata$am)
adj$vs <- factor(adj$vs)
adj$am <- factor(adj$am)
f2 <- lm(mpg ~ wt, data=adj)
f3 <- lm(mpg ~ wt + am, data=adj)
summary(f3)$coef
f3 <- lm(mpg ~ wt + am + 1, data=adj)
summary(f3)$coef
adj2 <- adj
adj2$am <- factor(numeric(adj$am) + 1)
adj2$am <- numeric(adj$am) + 1
adj2$am <- factor(as.numeric(adj$am) + 1)
head(adj2)
adj2$am <- as.numeric(adj$am) + 1
head(adj2)
adj2$am <- as.numeric(adj$am)
head(adj2)
head(mtcars)
adj2$am <- as.numeric(mtcars$am) + 1
head(mtcars)
head(adj2)
adj2$am <- factor(as.numeric(mtcars$am) + 1)
head(adj2)
f4 <- lm(mpg ~ wt + am, data=adj2)
summary(f4)
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ ., data=swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, data=swiss)
vif(mdl2)
exit
quit()
swirl()
library(swirl)
swirl()
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, data=swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, data=swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
library(swirl)
swirl()
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family="binomial", data=ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
library(MASS)
data(shuttle)
head(shuttle)
class(shuttle$use)
s <- shuttle
?ifn
?ifdef
?ifdf
?iffn
dim(s)
as.numeric(s$use)
as.numeric(s$use) - 1
s$usen <- as.numeric(s$use) - 1
head(s)
tail(s)
summary(s$wind)
s$windn <- as.numeric(s$wind)
f1 <- lm(usen ~ windn, data=s)
summary(f1)
f2 <- glm(usen ~ windn, data=s, family="binomial")
summary(f2)
confint(f2)
lo <- predict(f2)
exp(lo)/(1 + exp(lo))
exp(confint(lo))
confint(lo)
exp(lo)
head(s)
s$magnn <- as.numeric(s$magn)
head(s)
f3 <- glm(use ~ (windn - 1) + magn, data=s, family="binomial")
f3
exp(coef(f2))
anova(f3, test="Chisq")
4.2409/1.8707
f3
f3 <- glm(use ~ (windn - 1) + magnn, data=s, family="binomial")
f3
exp(confint(f3))
f4 <- glm((1- use) ~ (windn - 1) + magnn, data=s, family="binomial")
f3 <- glm(usen ~ (windn - 1) + magnn, data=s, family="binomial")
exp(confint(f3))
f4 <- glm((1- usen) ~ (windn - 1) + magnn, data=s, family="binomial")
f4
f3
?odds.ratio
??odds.ratio
install.packages("abd")
library(abd)
f2
f2$coefficients
f3$coefficients
odds.ratio(rbind(f2$coefficients, f3$coefficients))
library(abd)
odds.ratio(rbind(f2$coefficients, f3$coefficients))
f3$coefficients
f3$coefficients[1]
f2$coefficients[1]
f2$coefficients[1]/(1-f2$coefficients[1])
f2$coefficients[1]/f3$coefficients[1]
1/1.24
f4
f3
f3$coefficients
f3$coefficients[1]
f4$coefficients[1]
f3$coefficients[1]/(1 - f3$coefficients[1])
head <- s[s$wind == 'head',]
tail <- s[s$wind == 'tail']
tail <- s[s$wind == 'tail',]
fhead <- glm(usen ~ windn + magnn, family="binomial", data=head)
ftail <- glm(usen ~ windn + magnn, family="binomial", data=tail)
fhead
ftail
coef(fhead)
exp(coef(fhead))
exp(coef(ftail))
cft <- exp(coef(ftail))
cfh <- exp(coef(fhead))
cft
cft[1]
cft[3]
cfh[3]/cft[3]
fhead$coefficients
fhead$coefficients[3]
fhead$coefficients[3]/ftail$coefficients[3]
fhead$coefficients/ftail$coefficients
fhead$coefficients[1]/ftail$coefficients[1]
1/fhead$coefficients[1]/ftail$coefficients[1]
1/fhead$coefficients[3]/ftail$coefficients[3]
fhead$coefficients[3]/ftail$coefficients[3]
fhead
summary(fhead)
summary(ftail)
0.07627/0.03827
0.03827/0.07627
f11 <- lgm(usen ~ windn + magnn, data=s, family="binomial")
f11 <- glm(usen ~ windn + magnn, data=s, family="binomial")
f11
f12 <- glm(usen ~ wind + magnn, data=s, family="binomial")
f12
f12 <- glm(usen ~ wind + magnn + 1, data=s, family="binomial")
f12
f12 <- glm(usen ~ (wind + 1) + magnn, data=s, family="binomial")
f12
f12 <- glm(usen ~ (windn + 1) + magnn, data=s, family="binomial")
f12
s$windi <- as.factor(s$wind) + 1
s$windi <- as.numeric(s$wind) + 1
s$windi
s$windi <- as.numeric(s$wind)
s$windi
f12 <- glm(usen ~ windi + magnn, data=s, family="binomial")
f12
exp(coef(f12))
install.packages("caret")
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
set.seed(333)
smallSpam <- spam[sample(dim(spam)[1], size=10),]
smallSpam
head(smallSpam)
spamLabel <- (smallSpam$type=="spam")*1 + 1
spamlaebl
spamlabel
spamLabel
plot(smallSpam$capitalAve, col=spamLabel)
install.packages("caret")
library(caret)
linrary(kernlab)
library(kernlab)
data(spam)
set.seed(32343)
modelFit <- train(type ~ ., data=training, method="glm")
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
modelFit <- train(type ~ ., data=training, method="glm")
modelFit
install.packages("e1071")
modelFit <- train(type ~ ., data=training, method="glm")
modelFit
modelFit$finalModel
predictions <- predict(modelFit, newdata=testing)
predictions
confusionMatrix(predictions, testing$type)
install.packages("ISLR")
library(ISLR)
data(Wage)
library(ggplot2)
inTrain <-createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
library(caret)
inTrain <-createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
featurePlot(x=training[,c["age", "education", "jobClass")],
y= training$wage, plot="pairs")
featurePlot(x=training[,c["age", "education", "jobClass")],
featurePlot(x=training[, c("age", "education", "jobclass")], y=training$wage, plot="pairs")
qplot(age, wage, color=jobclass, data=training)
qq <- qplot(age, wage, color=education, data=training)
qq + geom_smooth(method="lm", formula=y~x)
cutWage <- cut2(training$wage, g=3)
library(Hmisc)
cutWage <- cut2(training$wage, g=3)
table(cutWage)
p1 <- qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot"))
p1
t1 <- table(cutWage, training$jobclass)
prop.table(p1, 1)
prop.table(t1, 1)
qplot(wage, color=education, data=training, geom=c("density"))
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve, main="", xlab="ave. capital run length")
trainCapAve <- training$capitalAve
trainCapAveS <= (trainCapAve - mean(trainCapAve))/sd(trainCapAve)
trainCapAveS <- (trainCapAve - mean(trainCapAve))/sd(trainCapAve)
mean(trainCapAveS)
modelFit <- train(type ~ ., data=training), preProcess=c("center", "scale"), method="glm")
modelFit <- train(type ~ ., data=training, preProcess=c("center", "scale"), method="glm")
warnings()
modelFit
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
hist(training$capitalAve, main="", xlab="ave. capital run length")
testing <- spam[-inTrain]
head(testign)
head(testing)
data(iris)
inTrain <- createDataPartition(y=iris$Species, p=0.75, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
training
dim(testing)
qplot(Petal.Width, Sepal.Width, color=Species, data=training)
modFit <- train(Species ~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
install.packages("rattle")
library(rattle)
install.packages("shiny")
library("devtools", lib.loc="~/R/win-library/3.1")
devtools::install_github("rstudio/shinyapps")
shinyapps::setAccountInfo(name='irvingprime', token='FED9C1C0E5D1A9259D3C50EE5821992E', secret='9WHwsm2w6RMavpMt5Bxodj4EgJquyWU8aKeZObnV')
install.packages("rCharts")
require(devtools)
install_github('rCharts','ramnathv')
install.packages("plotly")
Sys.setenv("plotly_username"="irvingprime")
ys.setenv("plotly_api_key"="nogh5yosba")
Sys.setenv("plotly_api_key"="nogh5yosba")
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = carat, y = price, text = paste("Clarity: ", clarity),
mode = "markers", color = carat, size = carat)
p <- plot_ly(midwest, x = percollege, color = state, type = "box")
p
library(stats)
data("ability.cov")
head(ability.cov)
library(manipulate)
manipulate(plot(1:x) x=slider(1, 100))
manipulate(plot(1:x), x=slider(1, 100))
setwd("code/datasciencecoursera/data_products/dp_project/")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
